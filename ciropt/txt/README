Updated on 21 June 2012
Notes by Pete Stevenson <jpeter@stanford.edu>

Original program by akcheung (at stanford)

Build system modified to match my preferences (generated files never land in the source directory).
Compile errors and warnings fixed.
Source code beautified with astyle.
I have a letterbox screen, and so do most people(*) in 2012.  The 80 character limit has been dead for at least a decade.
i.e. most people who would play with this source code.

Original notes below this line.
__________________________________________________________________________________________________________________________________
when you type 'make'

necessary files:
	network.h opt.h
	ciropt.l ciropt.ypp dio.l dio.ypp cnstr.l cnstr.ypp gps.l gps.ypp
	ciropt.cpp opt.cpp network.cpp
	GP/symtab.cpp GP/posy.cpp GP/ggp.cpp GP/ckt_dgopt.c GP/d2p.cpp
	(where 'GP' stands for the 'gp_parser' directory.)

output files:
	ciropt
	.o files
	lex.*.c files and *.tab.cpp files generated by 'flex' and 'bison'

ciropt <name>
  takes one input argument <name>,
  executes 'dgopt' of mosek,
  produces <name>.out <name>.gp <name>.nm <name>.m

  1. ciropt.cpp (main code)
    #includes "network.h" "opt.h",
    declares global variables, 'network * nw' and 'opt_prob_generator * op',
    declares 'int ciroptparse()',
    defines 'int main(int,char*[])'
    
    this main code
    1) reads from <name>.sp
      the 'global parameters' (or global constants),
      ccc types, circuit connectivity information, primary inputs (with
      starting times, slopes and input capacitiy constraints),
      primary outputs (with output capacitors), and global constraints,
    2) reads from <name>.dio delay models,
    3) generates corresponding a deterministic optimization problem,
    4) solves it using 'dgopt' of mosek,
    5) report the result to <name>.out,
    6) writes the original generalized GP in <name>.nm,
    7) writes the equivalent GP in <name>.gp,
    8) writes a matlab code which solves the problem using 'mskdgopt'
       of mosek.

  2. ciropt.ypp
    Along with ciropt.cpp, the core part of the program is in here.
    It defines the rule (or format) of .sp file and do proper actions
    for each reduction rule by calling public member functions of
    the class 'network', 'opt_prob_generator', etc.
    The detail of this will be (hopefully) easily understood
    by reading the rules in the file along with the comments
    and explanations in network.h and opt.h.

  3. network.h & network.cpp
    these files have the declarations and definitions of the classes,
    'network', 'ccc', 'dio', 'node', 'edge', 'piinfo', and 'poinfo'.

    3-1. class 'network'
      'network' contains the connectivities of the circuits,
      such as, which node is connected to which edge,
      which node is of which ccc type, etc.

    3-2. class 'ccc'
      'ccc' contains the information of a ccc type, such as,
      delay models for each input to output, etc.

    3-3. class 'dio'
      'dio' contains the delay models

    3-4. class 'node'
      'node' represents a gate, and this class contains the information
      of name, ccc type, inputs nets, output net, etc.
      as a special case, it can represent a capacitor.

    3-5. class 'edge'
      'edge' stands for a net and this class contains the information
      of name, to which gates it is connected as which input,
      primary input information in case that it is a primary input,
      or primary output information in case that it is a primary output,
      etc.

    3-6. class 'piinfo'
      'piinfo' contains primary input information, such as,
      input capacitor constraint, f/r slopes, starting times, etc.

    3-7. class 'poinfo'
      'poinfo' constants primary output information, such as,
      output load, etc.

  4. opt.h & opt.cpp
    these files have the declarations and definitions of the classes,
    'global_parameters' and 'opt_prob_generator'.

    4-1. class 'global_parameters'
      'global_parameters' contains the global parameter values.

    4-2. class 'opt_prob_generator'
      'opt_prob_generator' takes a reference to a network (as the input
      argument of the (only) constructor) and its various methods provide
      the functionality of generate a GGP, solving it using 'dgopt' of mosek,
      etc.


written by Sunghee Yun
