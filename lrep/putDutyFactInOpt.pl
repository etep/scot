#! /usr/bin/perl -w


#########################################################################
# putDutyFactInOpt.pl
#########################################################################

# Written 9/26/2004 by Dinesh Patil 
# modified 10/18/2005 by Dinesh Patil 

# This script takes in the .power file containing the activity factors 
# generated by IRSIM runs and the modified spice file (used for optimization
# with ciropt) and adds the .POWER section in that spice file. One cant directly 
# include the .POWER section from the .power file due to case sensitive nature
# of ciropt vs the case insensitive nature of IRSIM!. 
#
# This script first changes the .power file itself to reflect the case sensitive names.
# It then uses the script putSectionInOpt.pl to put the .POWER section in the Optfile. 
#
# The script uses a dummy File whose  name is the input spice file prefixed with
# dummyActFact. This is deleted later and the result is the spice file with the 
# .POWER section included.
#
#########################################################################
# Load Libraries
#########################################################################
use File::Basename;
use Getopt::Long;
($prog) = fileparse($0);

# Check for proper number of arguments and extract args
if ($#ARGV != 1) { # $#ARGV is the number of command line arguments minus 1
    print STDERR "Usage: $prog Modified_spice_file  .duty_file \n"; # $0 is the script name
    print STDERR "EXAMPLE: $prog adder_64mod.sp  adder64.sp.duty\n";
    print STDERR "A dummy file called dummyDutyFact_Modified_spice_filename will be used\n";
    exit;
}
print "Running $prog\n";
$spfile = shift(@ARGV);
$dutyfile = shift(@ARGV);
$dumfile = "dummyDutyFact_".$spfile;

#record the duty factors from the .duty file first.
open (DUTY,"<$dutyfile") ||  die  ("Can't open $dutyfile : $!\n");
open (DUM,">$dumfile") ||  die  ("Can't open $dumfile : $!\n");
while(<DUTY>)
{
		 if(/\.DUTY/ or /\.ENDS/)
		 {
					next;
		 }
		 if(/^\*/)
		 {
					print DUM $_;
					next;
		 }
		 s/;//;
		 s/\s+//g;
		 @tokens = split /:/, $_;
		 $index = lc($tokens[0]);
		 $dutyFact{$index} = sprintf("%.4f", $tokens[1])+ 0;
}

close(DUTY);
open (SP,"<$spfile") ||  die  ("Can't open $spfile : $!\n");
$record = 0;
$recordSUB=0;
while(<SP>)
{
		 if(/^\s*\.SUBCKT/)
		 {
					$recordSUB = 1
		 }
		 if(/^\s*\.CONNECT/)
		 {
					$record = 1;   #record the outputs of all gates
		 }
		 if($recordSUB == 1)
		 {
					@tokens = split /\s*:\s*/, $_;
					@subtoken1 = split /\s+/, $tokens[0];
					shift(@subtoken1); #to remove the .SUBCKT label
					$gatetype = shift(@subtoken1);
					for($i=0;$i<=$#subtoken1;$i++)
					{
#							 print "$gatetype......$subtoken1[$i]\n";
							 $gateOutInfo{$gatetype}[$i] = $subtoken1[$i];
					}
					$recordSUB = 0;
		 }
		 if($record == 1)
		 {
			  	 if(/^X/)
			  	 {
								@tokens = split /\s*:\s*/, $_;
                @subtoken1 = split /\s+/, $tokens[0];
                $gatename = shift(@subtoken1);
                @subtoken2 = split /\s+/, $tokens[2];
								$gatetype = shift(@subtoken2);
#                print "** $gatename $gatetype\n";
                for($i = 0; $i<=$#subtoken1; $i++)
                {
                		$outnet = lc($subtoken1[$i]);
#										print "* $outnet\n";
                		if(exists $dutyFact{$outnet})
                		{
#												 print "*** $gateOutInfo{$gatetype}[$i] \n";
                				 $gateDutyFact{$gatename}{$gateOutInfo{$gatetype}[$i]} = $dutyFact{$outnet};
                		}
                		else
                		{
                				 die("The duty factor of net $subtoken1[$i] is not reported\n");
										}
								}
			  	 }
		 }
		 if(/^\s*\.ENDS/)
		 {
					$record = 0;
		 }
}
print DUM ".DUTY\n";
for $key1 ( keys %gateDutyFact)
{
 		for $key2 (keys %{$gateDutyFact{$key1}})
 		{
 				 if(exists $gateDutyFact{$key1}{$key2})
 				 {
 							print DUM "$key1 $key2 : $gateDutyFact{$key1}{$key2} ;\n";
 				 }
 		}
}
print DUM ".ENDS\n\n";
close(SP);
close(DUM);
$scotHome = $ENV{ 'SCOT_HOME_DIR' };
$perlHome = $scotHome . '/lrep';
$psioPerl = $perlHome . '/putSectionInOpt.pl';
system("$psioPerl $spfile $dumfile DUTY");
`rm -f $dumfile`;
